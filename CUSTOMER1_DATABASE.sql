CREATE TABLE IF NOT EXISTS CUSTOMER
(
CUSTOMER_ID INT PRIMARY KEY,
FIRST_NAME VARCHAR(50),
LAST_NAME VARCHAR(50),
EMAIL VARCHAR(100),
ADDRESS_ID INT
);
-- IMPORTING CSV TO SQL
COPY CUSTOMER(CUSTOMER_ID,FIRST_NAME,LAST_NAME,EMAIL,ADDRESS_ID)
FROM 'C:\Users\naths\OneDrive\Desktop\DATA ANALYSIS\POSTGRESQL\customer.csv'
DELIMITER ','
CSV HEADER;
ALTER TABLE PAYMENT ADD CONSTRAINT CUSTOMER_ID FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER (CUSTOMER_ID);
--GROUP BY
SELECT 
    C.CUSTOMER_ID AS ID, 
    SUM(P.AMOUNT) AS TOTAL, 
    P.PAYMENT_MODE, 
    CONCAT(C.FIRST_NAME, ' ', C.LAST_NAME) AS NAME, 
    C.EMAIL 
FROM 
    CUSTOMER AS C 
JOIN 
    PAYMENT AS P 
ON 
    C.CUSTOMER_ID = P.CUSTOMER_ID 
GROUP BY 
    P.PAYMENT_MODE, C.FIRST_NAME, C.LAST_NAME, C.EMAIL, C.CUSTOMER_ID 
HAVING 
    SUM(P.AMOUNT) > 1 
ORDER BY 
    C.CUSTOMER_ID ASC;
SELECT PAYMENT_MODE ,COUNT(AMOUNT) AS TOTAL FROM PAYMENT GROUP BY PAYMENT_MODE HAVING COUNT(AMOUNT)>=3 ORDER BY TOTAL DESC;

SELECT * FROM CUSTOMER;

-- SELECT ALL CUSTOMERS WITH EMAIL ADDRESSES ENDING IN 'MAILID.COM'
SELECT * 
FROM CUSTOMER
WHERE EMAIL LIKE '%mailid.com';
-- SELECT ALL CUSTOMERS WHOSE FIRST NAME STARTS WITH THE LETTER 'M'
SELECT * 
FROM CUSTOMER
WHERE FIRST_NAME LIKE 'M%';
-- SELECT CUSTOMERS WHOSE LAST NAME CONTAINS THE SUBSTRING 'SON'
SELECT * 
FROM CUSTOMER
WHERE LAST_NAME LIKE '%son%';
-- SELECT CUSTOMERS WHOSE FIRST NAME HAS 'A' AS THE SECOND CHARACTER
SELECT * 
FROM CUSTOMER 
WHERE FIRST_NAME LIKE '_a%';
-- SELECT CUSTOMERS WITH 'R' IN EITHER THE FIRST OR LAST NAME
SELECT * 
FROM CUSTOMER 
WHERE FIRST_NAME LIKE '%r%' OR LAST_NAME LIKE '%r%';

--CTE

WITH MY_CTE AS (
    SELECT 
        PAYMENT_MODE,
        MAX(AMOUNT) AS HIGHEST_PRICE,
        SUM(AMOUNT) AS TOTAL_PRICE
    FROM PAYMENT
    GROUP BY PAYMENT_MODE
)
SELECT 
    PAYMENT.*, 
    MY.HIGHEST_PRICE, 
    MY.TOTAL_PRICE 
FROM PAYMENT
JOIN MY_CTE MY 
ON PAYMENT.PAYMENT_MODE = MY.PAYMENT_MODE
ORDER BY PAYMENT.PAYMENT_MODE;

--RECURSIVE CTE
WITH RECURSIVE MY AS(
SELECT 1 AS N-- BASE QUERY
UNION ALL 
SELECT N+1 FROM MY WHERE N<3-- RECURSIVE QUERY
)

SELECT * FROM MY;